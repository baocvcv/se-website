# Generated by Django 2.2.5 on 2019-10-16 11:48

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='KnowledgeNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_id', models.CharField(max_length=20)),
                ('name', models.CharField(max_length=200)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_backend.knowledgenode_set+', to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Paper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_backend.paper_set+', to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_name', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_name', models.CharField(max_length=200)),
                ('question_type', models.IntegerField()),
                ('question_level', models.FloatField(default=0)),
                ('question_change_time', models.DateTimeField()),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='QuestionBanks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('root_id', models.IntegerField()),
                ('name', models.CharField(max_length=200)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_backend.questionbanks_set+', to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='QuestionGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_version', models.DateTimeField()),
                ('belong_bank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.QuestionBanks')),
                ('parents_node', models.ManyToManyField(to='backend.KnowledgeNode')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_backend.questiongroup_set+', to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='UserPermissions',
            fields=[
                ('group_name', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('view_students', models.BooleanField(default=False)),
                ('create_students', models.BooleanField(default=False)),
                ('edit_students', models.BooleanField(default=False)),
                ('ban_students', models.BooleanField(default=False)),
                ('promote_students', models.BooleanField(default=False)),
                ('view_admins', models.BooleanField(default=False)),
                ('create_admins', models.BooleanField(default=False)),
                ('edit_admins', models.BooleanField(default=False)),
                ('ban_admins', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='BriefAnswerQ',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.Question')),
                ('question_content', models.CharField(default='', max_length=20000)),
                ('question_image', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(default=''), size=None)),
                ('question_ans', models.CharField(default='', max_length=20000)),
                ('question_solution', models.CharField(default='', max_length=20000)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('backend.question',),
        ),
        migrations.CreateModel(
            name='ChoiceQ',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.Question')),
                ('question_content', models.CharField(max_length=20000)),
                ('question_image', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), size=None)),
                ('question_choice', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20000), size=None)),
                ('question_solution', models.CharField(max_length=20000)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('backend.question',),
        ),
        migrations.CreateModel(
            name='FillBlankQ',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.Question')),
                ('question_content', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20000), size=None)),
                ('question_blank_num', models.IntegerField()),
                ('question_image', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), size=None)),
                ('question_ans', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20000), size=None)),
                ('question_solution', models.CharField(max_length=20000)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('backend.question',),
        ),
        migrations.CreateModel(
            name='TrueOrFalseQ',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.Question')),
                ('question_content', models.CharField(max_length=20000)),
                ('question_image', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), size=None)),
                ('question_ans', models.BooleanField()),
                ('question_solution', models.CharField(max_length=20000)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('backend.question',),
        ),
        migrations.CreateModel(
            name='QuestionVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_version', models.DateTimeField()),
                ('paper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Paper')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_backend.questionversion_set+', to='contenttypes.ContentType')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.QuestionGroup')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.AddField(
            model_name='question',
            name='history_version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.QuestionGroup'),
        ),
        migrations.AddField(
            model_name='question',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_backend.question_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='paper',
            name='questions',
            field=models.ManyToManyField(through='backend.QuestionVersion', to='backend.QuestionGroup'),
        ),
        migrations.AddField(
            model_name='knowledgenode',
            name='question_bank',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.QuestionBanks'),
        ),
        migrations.AddField(
            model_name='knowledgenode',
            name='subnodes',
            field=models.ManyToManyField(to='backend.KnowledgeNode'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_group', models.CharField(choices=[('Student', 'Student'), ('Admin', 'Admin'), ('SuperAdmin', 'SuperAdmin')], default='Student', max_length=10)),
                ('last_login_time', models.DateTimeField(auto_now=True)),
                ('last_login_ip', models.GenericIPAddressField(default='127.0.0.1')),
                ('is_banned', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='backend.Profile')),
                ('user_permissions', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.UserPermissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='MultpChoiceQ',
            fields=[
                ('choiceq_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.ChoiceQ')),
                ('question_ans', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), size=None)),
                ('question_ans_num', models.IntegerField()),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('backend.choiceq',),
        ),
        migrations.CreateModel(
            name='SingleChoiceQ',
            fields=[
                ('choiceq_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.ChoiceQ')),
                ('question_ans', models.CharField(max_length=10)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('backend.choiceq',),
        ),
    ]
