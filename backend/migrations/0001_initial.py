# Generated by Django 2.2.5 on 2019-11-15 08:13

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_group', models.CharField(choices=[('Student', 'Student'), ('Admin', 'Admin'), ('SuperAdmin', 'SuperAdmin')], default='Student', max_length=10)),
                ('last_login_time', models.DateTimeField(auto_now=True)),
                ('last_login_ip', models.GenericIPAddressField(null=True)),
                ('is_banned', models.BooleanField(default=False)),
                ('question_banks', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='KnowledgeNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='unnamed node', max_length=200)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_backend.knowledgenode_set+', to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Paper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='unmaned paper', max_length=200)),
                ('total_point', models.IntegerField(default=100)),
                ('tips', models.CharField(default='', max_length=200)),
                ('status', models.CharField(default='drafted', max_length=200)),
                ('is_latest', models.BooleanField(default=True)),
                ('time_limit', models.IntegerField(default=0)),
                ('have_brief_ans', models.BooleanField(default=True)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_backend.paper_set+', to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='PaperRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_time', models.DateTimeField(auto_now=True)),
                ('need_judging', models.BooleanField(default=True)),
                ('is_timed', models.BooleanField(default=False)),
                ('start_time', models.DateTimeField(auto_now=True)),
                ('time_left', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('user_total_points', models.IntegerField(default=0)),
                ('paper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Paper')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_name', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_name', models.CharField(max_length=200)),
                ('question_type', models.IntegerField()),
                ('question_level', models.IntegerField(default=0)),
                ('question_change_time', models.DateTimeField()),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='QuestionBank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('root_id', models.IntegerField()),
                ('name', models.CharField(max_length=200)),
                ('picture', models.CharField(max_length=10000000)),
                ('brief', models.CharField(max_length=20000)),
                ('createTime', models.DateTimeField()),
                ('lastUpdate', models.DateTimeField()),
                ('authority', models.CharField(max_length=200)),
                ('question_count', models.IntegerField()),
                ('invitation_code_count', models.IntegerField()),
                ('activated_code_count', models.IntegerField()),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_backend.questionbank_set+', to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='QuestionVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_point', models.IntegerField(default=0)),
                ('point_every_blank', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=list, size=None)),
                ('question_num', models.IntegerField()),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_backend.questionversion_set+', to='contenttypes.ContentType')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Question')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='UserPermissions',
            fields=[
                ('group_name', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('view_students', models.BooleanField(default=False)),
                ('create_students', models.BooleanField(default=False)),
                ('ban_students', models.BooleanField(default=False)),
                ('view_admins', models.BooleanField(default=False)),
                ('create_admins', models.BooleanField(default=False)),
                ('ban_admins', models.BooleanField(default=False)),
                ('change_user_group', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='BriefAnswerQ',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.Question')),
                ('question_content', models.CharField(default='', max_length=20000)),
                ('question_image', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(default='', max_length=10000000), size=None)),
                ('question_ans', models.CharField(default='', max_length=20000)),
                ('question_solution', models.CharField(default='', max_length=20000)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('backend.question',),
        ),
        migrations.CreateModel(
            name='ChoiceQ',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.Question')),
                ('question_content', models.CharField(max_length=20000)),
                ('question_image', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10000000), size=None)),
                ('question_choice', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20000), size=None)),
                ('question_solution', models.CharField(max_length=20000)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('backend.question',),
        ),
        migrations.CreateModel(
            name='FillBlankQ',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.Question')),
                ('question_content', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20000), size=None)),
                ('question_blank_num', models.IntegerField()),
                ('question_image', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10000000), size=None)),
                ('question_ans', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20000), size=None)),
                ('question_solution', models.CharField(max_length=20000)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('backend.question',),
        ),
        migrations.CreateModel(
            name='TrueOrFalseQ',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.Question')),
                ('question_content', models.CharField(max_length=20000)),
                ('question_image', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10000000), size=None)),
                ('question_ans', models.BooleanField()),
                ('question_solution', models.CharField(max_length=20000)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('backend.question',),
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('total_point', models.IntegerField()),
                ('section_num', models.IntegerField()),
                ('belong_paper', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.Paper')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_backend.section_set+', to='contenttypes.ContentType')),
                ('questions', models.ManyToManyField(through='backend.QuestionVersion', to='backend.Question')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.AddField(
            model_name='questionversion',
            name='section',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='backend.Section'),
        ),
        migrations.CreateModel(
            name='QuestionRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_id', models.IntegerField()),
                ('question_type', models.CharField(default='', max_length=20)),
                ('record_time', models.DateTimeField(auto_now=True)),
                ('ans', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(default='', max_length=20000), size=None)),
                ('score', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('is_correct', models.BooleanField(blank=True)),
                ('paper_record', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.PaperRecord')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_version', models.DateTimeField()),
                ('belong_bank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.QuestionBank')),
                ('parents_node', models.ManyToManyField(to='backend.KnowledgeNode')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_backend.questiongroup_set+', to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.AddField(
            model_name='question',
            name='history_version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.QuestionGroup'),
        ),
        migrations.AddField(
            model_name='question',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_backend.question_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='knowledgenode',
            name='question_bank',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.QuestionBank'),
        ),
        migrations.AddField(
            model_name='knowledgenode',
            name='subnodes',
            field=models.ManyToManyField(to='backend.KnowledgeNode'),
        ),
        migrations.CreateModel(
            name='EmailVerificationRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=50, verbose_name='Code')),
                ('email', models.EmailField(max_length=50, verbose_name='Email')),
                ('send_type', models.CharField(choices=[('register', 'Register'), ('forget', 'Reset password')], max_length=10, verbose_name='Veification type')),
                ('send_time', models.DateTimeField(auto_now=True, verbose_name='Send time')),
                ('is_valid', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Email verification code',
                'verbose_name_plural': 'Email verification code',
            },
        ),
        migrations.CreateModel(
            name='AuthCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=30, unique=True)),
                ('time_generated', models.DateTimeField(auto_now=True)),
                ('is_usable', models.BooleanField(default=True)),
                ('question_bank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.QuestionBank')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='profile',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='backend.Profile'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.UserPermissions'),
        ),
        migrations.CreateModel(
            name='MultpChoiceQ',
            fields=[
                ('choiceq_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.ChoiceQ')),
                ('question_ans', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), size=None)),
                ('question_ans_num', models.IntegerField()),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('backend.choiceq',),
        ),
        migrations.CreateModel(
            name='SingleChoiceQ',
            fields=[
                ('choiceq_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.ChoiceQ')),
                ('question_ans', models.CharField(max_length=10)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('backend.choiceq',),
        ),
    ]
